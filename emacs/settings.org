#+title: Emacs Config File
#+author: Paul Warnes
* General Setup
** Set email address
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "paul@warnes.us")
#+END_SRC

** Open Config Keybinding
Setup a key binding to open the settings file.
#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Open the settings.org config file"
      (interactive)
       (find-file (concat user-emacs-directory "/settings.org")))

  (keymap-global-set "C-c i" 'edit-config)
#+END_SRC
* Package Config
Generic install packages.
** List of packages
#+BEGIN_SRC emacs-lisp
  (setq my-package-list
    '(
      use-package
      dracula-theme
      projectile
      flycheck
      format-all
      yasnippet
      lsp-mode
      lsp-ui
      lsp-java
      lsp-treemacs
      magit
      hydra
      company
      which-key
      dap-mode
      helm-lsp
      helm
      org-roam
      evil))
#+END_SRC

** Install the Selected Packages
#+BEGIN_SRC emacs-lisp
  (dolist (package my-package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

* General Look and Feel
** Usability
*** Always show line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers 'relative)
#+END_SRC
*** Display Helpful Info 
#+BEGIN_SRC emacs-lisp
    ;; show commands
    (use-package which-key
        :config (which-key-mode))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme)
  (load-theme 'dracula t)
#+END_SRC
*** Compile window colors
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+END_SRC
*** Transparent Background
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+END_SRC
** Menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
#+END_SRC
* General IDE Stuff
#+BEGIN_SRC emacs-lisp
  ;; project management
  (use-package projectile
      :ensure t
      :init (projectile-mode +1)
      :bind (:map projectile-mode-map
          ("C-C p" . projectile-command-map)))
  ;; on the fly syntax checking
  (use-package flycheck
      :ensure t)
  ;; code snippets
  (use-package yasnippet
      :config (yas-global-mode))
  ;; lsp integration
  (use-package lsp-mode
      :hook ((lsp-mode . lsp-enable-which-key-integration)))
  (use-package lsp-ui)
  ;; chain commands together, C-c j and C-c k -> C-c jjkkj
  (use-package hydra)
  ;; auto-completion framework
  (use-package company
      :bind (("C-x j c" . company-complete)))
  ;; debug mode
  (use-package dap-mode
      :after lsp-mode
      :config (dap-auto-configure-mode))
  (use-package helm-lsp)
  (use-package helm
      :config (helm-mode))
  (use-package lsp-treemacs)

  ;; Git integration
  (use-package magit :ensure t)

#+END_SRC
** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :preface
    (defun ian/format-code ()
      "Auto-format whole buffer"
      (interactive)
      (if (derived-mode-p 'prolog-mode)
        (prolog-indent-buffer)
        (format-all-buffer)))
    :config
    (global-set-key (kbd "M-F") #'ian/format-code)
    (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)

#+END_SRC

** paren matching
   Setup no delay for matching
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))

#+END_SRC

* Java IDE Stuff
To install a Java LSP server: C-u M-x lsp-install-server and select jdtls
#+BEGIN_SRC emacs-lisp

  (use-package lsp-java
    :config (add-hook 'java-mode-hook 'lsp))
  (require 'dap-java)

#+END_SRC

** Formatting
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook
    (lambda ()
      (setq format-all-formatters
        '(("Java" (clang-format))))))
  (defun format-java-on-save ()
    (when (eq major-mode 'java-mode)
      (format-all-buffer)))

  (add-hook 'before-save-hook #'format-java-on-save)
#+END_SRC

* Evil Mode
Use vim like keybindings/modes.

#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+END_SRC

* Org Mode
Note taking and second brain.

** Org-Roam

Enable org-roam and basic keys

#+BEGIN_SRC emacs-lisp
  (defvar *org-roam-dir* "~/Nextcloud/Notes/roam")
  (defun open-org-roam-toc ()
    "Open the settings.org config file"
      (interactive)
       (find-file (concat *org-roam-dir* "/central.org")))

  (keymap-global-set "C-c i" 'edit-config)
  (use-package org-roam
    :ensure t
    :custom (org-roam-directory *org-roam-dir*)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n d" . org-roam-node-find)
           ("C-c n t" . open-org-roam-toc)
           ("C-c n i" . org-roam-node-insert))
    :config (org-roam-setup))
#+END_SRC
