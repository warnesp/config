#+title: Emacs Config File
#+author: Paul Warnes
* General Setup
** Set email address
#+BEGIN_SRC emacs-lisp
  (setq user-mail-address "paul@warnes.us")
#+END_SRC

** Open Config Keybinding
Setup a key binding to open the settings file.
#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    "Open the settings.org config file"
      (interactive)
       (find-file (concat user-emacs-directory "/settings.org")))

  (keymap-global-set "C-c i" 'edit-config)
#+END_SRC
* Package Config
Generic install packages.
** List of packages
#+BEGIN_SRC emacs-lisp
  (setq my-package-list
    '(
      use-package
      dracula-theme
      flycheck
      format-all
      yasnippet
      lsp-mode
      lsp-ui
      lsp-java
      lsp-treemacs
      magit
      hydra
      company
      dap-mode
      helm-lsp
      helm
      evil))
#+END_SRC

** Install the Selected Packages
#+BEGIN_SRC emacs-lisp
  (dolist (package my-package-list)
    (unless (package-installed-p package)
      (package-install package)))
#+END_SRC

* General Look and Feel
** Usability
*** Disable toolbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
#+END_SRC
*** Always show line numbers
#+BEGIN_SRC emacs-lisp
    (setq display-line-numbers-type 'relative) 
    (global-display-line-numbers-mode 1)
#+END_SRC
*** Display Helpful Info 
#+BEGIN_SRC emacs-lisp
  ;; show commands
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme)
  (load-theme 'dracula t)
#+END_SRC
*** Compile window colors
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-filter-hook 'ansi-color-compilation-filter)
#+END_SRC
*** Transparent Background
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter nil 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+END_SRC
** Menu bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 1)
#+END_SRC
** Hide minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (diminish 'auto-revert-mode))
#+END_SRC
** Dired simplified listing
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+END_SRC

* General IDE Stuff
** Projects
#+BEGIN_SRC emacs-lisp
  ;; project management
  (use-package projectile
    :ensure t
    :init (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-C p" . projectile-command-map))
    :config
    (setq projectile-globally-ignored-directories '("~/.cargo" "~/.rustup"))
    (setq projectile-get-ext-command projectile-git-command)
    )
#+END_SRC
** Tramp - remote connections
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
#+END_SRC
** Auto complete
#+BEGIN_SRC emacs-lisp
  ;; code snippets
  (use-package yasnippet
      :config (yas-global-mode))
  ;; auto-completion framework
  (use-package company
      :bind (("C-x j c" . company-complete)))
#+END_SRC
** Misc
#+BEGIN_SRC emacs-lisp
  ;; on the fly syntax checking
  (use-package flycheck
    :ensure t)
  ;; lsp integration
  (use-package lsp-mode
    :diminish lsp-lens-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration)))
  (use-package lsp-ui)
  ;; chain commands together, C-c j and C-c k -> C-c jjkkj
  (use-package hydra)
  ;; debug mode
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
  (use-package helm-lsp)
  (use-package helm
    :diminish helm-mode
    :config (helm-mode))
  (use-package lsp-treemacs)

  ;; Git integration
  (use-package magit :ensure t)

  (use-package abbrev
    :diminish abbrev-mode)

#+END_SRC
** Formatting
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :preface
    (defun ian/format-code ()
      "Auto-format whole buffer"
      (interactive)
      (if (derived-mode-p 'prolog-mode)
        (prolog-indent-buffer)
        (format-all-buffer)))
    :config
    (global-set-key (kbd "M-F") #'ian/format-code)
    (add-hook 'prog-mode-hook #'format-all-ensure-formatter))
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (setq indent-line-function 'insert-tab)

#+END_SRC

** paren matching
   Setup no delay for matching
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :ensure t
    :init (setq show-paren-delay 0)
    :config (show-paren-mode +1))

#+END_SRC

** Sideline
- Display items on the side
#+BEGIN_SRC emacs-lisp
  (use-package sideline
  :ensure t
    :init
    (setq sideline-backends-left-skip-current-line t  ; don't display on current line (left)
          sideline-backends-right-skip-current-line t ;don't display on current line (right)
          sideline-order-left 'down                   ; or 'up
          sideline-order-right 'up                    ; or 'down
          sideline-format-left "%s   "                ; format for left alignment
          sideline-format-right "   %s"               ; format for right alignment
          sideline-priority 100                       ; overlay's priority
          sideline-display-backend-name t             ; display the backend name
          ))
  (use-package sideline-flycheck
    :hook (flycheck-mode . sideline-flycheck-setup))
  (use-package sideline-lsp
    :init (setq sideline-backends-right '(sideline-lsp sideline-flycheck))
    :hook (lsp-mode . sideline-mode))
#+END_SRC

** File tree
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :config
    (treemacs-project-follow-mode)
    (global-set-key [f12] 'treemacs)
    )
  

#+END_SRC

* Java IDE Stuff
To install a Java LSP server: C-u M-x lsp-install-server and select jdtls
#+BEGIN_SRC emacs-lisp

  (use-package lsp-java
    :ensure nil
    :defer 3
    :config (add-hook 'java-mode-hook 'lsp)
    :init
    (setq lsp-java-save-actions-organize-imports t)
    (setq lsp-java-vmargs '("-Xms1G" "-Xmx12G" "-XX:+UseStringDeduplication"))
    (setq lsp-java-null-analysis-mode "automatic")
    (setq lsp-java-null-analysis-nonnull ["jakarta.annotation.Nonnull"])
    (setq lsp-java-null-analysis-nullable ["jakarta.annotation.Nullable"])
    )
  (require 'dap-java)

#+END_SRC

** Formatting
#+BEGIN_SRC emacs-lisp
  (add-hook 'java-mode-hook
    (lambda ()
      (setq format-all-formatters
        '(("Java" (clang-format))))))
  (defun format-java-on-save ()
    (when (eq major-mode 'java-mode)
      (format-all-buffer)))

  (add-hook 'before-save-hook #'format-java-on-save)
#+END_SRC

* Lisp IDE Stuff
To start Sly: M-x sly

#+BEGIN_SRC emacs-lisp
  (use-package sly
    :ensure t)
#+END_SRC

* Rust IDE Stuff
Need to install lsp-install-server rust-analyzer
Need to install librust-tree-setter-dev or equivelent

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    :init
    (setq rust-format-on-save t)
    ;(setq rust-mode-treesitter-derive t)
    :config
    (add-hook 'rust-mode-hook #'lsp)
    (add-hook 'rust-mode-hook (lambda () (prettify-symbols-mode)))
    (add-hook 'rust-mode-hook (lambda () (setq indent-tabs-mode nil)))
    )
#+END_SRC


* Evil Mode
Use vim like keybindings/modes.

#+BEGIN_SRC emacs-lisp
  (use-package undo-fu
    :ensure t)

  (use-package evil
    :init
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-fine-undo t)
    :config
    (evil-mode 1))
#+END_SRC

** Escape to quit command
#+BEGIN_SRC emacs-lisp
  (defun minibuffer-keyboard-quit ()
    "Abort recursive edit. In Delete Selection mode, if the mark is active, just deactivate it;
  the it takes a second \\[keyboard-quit] to abort the minibuffer."
    (interactive)
    (if (and delete-selection-mode transient-mark-mode mark-active)
        (setq deactivate-mark t)
      (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
      (abort-recursive-edit)))

  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'evil-exit-emacs-state)

#+END_SRC


* Org Mode
Note taking and second brain.

** Links in same window
#+BEGIN_SRC emacs-lisp
  (setf (cdr (rassoc 'find-file-other-window org-link-frame-setup)) 'find-file)
#+END_SRC

** Org Contacts
#+BEGIN_SRC emacs-lisp
  (use-package org-contacts
    :ensure t
    :after org
    :custom (org-contacts-file '("~/Nextcloud/Notes/contacts.org")))
#+END_SRC

** Org-Roam

Enable org-roam and basic keys

#+BEGIN_SRC emacs-lisp
  (defvar *org-roam-dir* "~/Nextcloud/Notes/roam")
  (defvar *org-roam-central* "central.org")
  (defun open-org-roam-toc ()
    "Open the settings.org config file"
      (interactive)
       (find-file (concat *org-roam-dir* "/" *org-roam-central*)))

  (keymap-global-set "C-c i" 'edit-config)
  (use-package org-roam
    :ensure t
    :custom (org-roam-directory *org-roam-dir*)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n d" . org-roam-node-find)
           ("C-c n t" . open-org-roam-toc)
           ("C-c n i" . org-roam-node-insert))
    :config (org-roam-setup))
  (setq initial-buffer-choice (concat *org-roam-dir* "/" *org-roam-central*))
  (org-roam-db-autosync-mode)
#+END_SRC

** Org Crypt
Use to encrypt parts of org files under a heading using
 : * Heading :crypt:
 : :PROPERTIES:
 : :CRYPTKEY: 0x123
 : :END:

#+BEGIN_SRC emacs-lisp
  (setq epg-pinentry-mode 'loopback)
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))
#+END_SRC
 - Always use symetric key
#+BEGIN_SRC emacs-lisp
  (setq org-crypt-key nil)
#+END_SRC

Auto-saving does not cooperate with org-crypt.el: so you need to
turn it off if you plan to use org-crypt.el quite often. Otherwise,
you'll get an (annoying) message each time you start Org.

To turn it off, but only locally use:
 : # -*- buffer-auto-save-file-name: nil; -*-
